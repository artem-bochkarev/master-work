typedef struct mfe_getter
{
    DATA_TYPE data[MFE_COUNTERS_SIZE];
    uint counters[MFE_COUNTERS_SIZE];
} mfe_Getter;

void mfe_clear(__global mfe_Getter* getter)
{
    #pragma unroll
    for (uint i=1; i<MFE_COUNTERS_SIZE; ++i)
    {
        getter->counters[i] = 0;
    }
}

void mfe_clear_loc(__local mfe_Getter* getter)
{
    #pragma unroll
    for (uint i=1; i<MFE_COUNTERS_SIZE; ++i)
    {
        getter->counters[i] = 0;
    }
}

//returns .x = most frequent elements index, .y worst frequent
uint2 mfe_check(__global const mfe_Getter* getter)
{
    uint2 result = 0;
    #pragma unroll
    for (uint i=1; i<MFE_COUNTERS_SIZE; ++i)
    {
        uint count = getter->counters[i];
        result.x = select(result.x, i, (count > getter->counters[result.x]) );
        result.y = select(result.y, i, (count < getter->counters[result.y]) );
    }
    return result;
}

uint2 mfe_check_loc(__local const mfe_Getter* getter)
{
    uint2 result = 0;
    #pragma unroll
    for (uint i=1; i<MFE_COUNTERS_SIZE; ++i)
    {
        uint count = getter->counters[i];
        result.x = select(result.x, i, (count > getter->counters[result.x]));
        result.y = select(result.y, i, (count < getter->counters[result.y]));
    }
    return result;
}

void mfe_increment(__global mfe_Getter* getter, __global const DATA_TYPE* element)
{
    uint4 result = 0;
    #pragma unroll
    for (uint i=0; i<MFE_COUNTERS_SIZE; ++i)
    {
        uint count = getter->counters[i];
        result.x = select(result.x, i, (count > getter->counters[result.x]) );
        result.y = select(result.y, i, (count < getter->counters[result.y]) );
        uint condition = equals( &(getter->data[i]), element );
        result.z = select(result.z, (uint)1, condition );
        result.w = select(result.w, i, condition );
    }
    
    //use founded or minimum(if not exists)
    result.w = select(result.y, result.w, result.z );
    getter->counters[result.w]++;
    //always rewrite data
    getter->data[result.w] = *element;
}

void mfe_increment_loc(__local mfe_Getter* getter, __global const DATA_TYPE* element)
{
    /*if (DEBUG_ME)
    {
        printf("increment: %f \n", *element);
        printf("\t");
        for (uint i=0; i<MFE_COUNTERS_SIZE; ++i)
        {
            printf("%4.1f ", getter->data[i]);
        }
        printf("\n\t");
        for (uint i=0; i<MFE_COUNTERS_SIZE; ++i)
        {
            printf("%4i ", getter->counters[i]);
        }
        printf("\n------------------------\n");
    }*/
    uint4 result = 0;
    #pragma unroll
    for (uint i=0; i<MFE_COUNTERS_SIZE; ++i)
    {
        uint count = getter->counters[i];
        result.x = select( result.x, i, ( count > getter->counters[result.x]) );
        result.y = select( result.y, i, ( count < getter->counters[result.y]) );
        uint condition = equals_lg( &(getter->data[i]), element );
        result.z = select(result.z, (uint)1, condition );
        result.w = select(result.w, i, condition );
    }
    
    //use founded or minimum(if not exists)
    result.w = select(result.y, result.w, result.z );
    getter->counters[result.w]++;
    //always rewrite data
    getter->data[result.w] = *element;
}

#ifdef MFE_CONDITIONAL
void mfe_incrementCond(__global mfe_Getter* getter, __global const DATA_TYPE* element, uint enabled)
{
    uint4 result = 0;
    #pragma unroll
    for (uint i=0; i<MFE_COUNTERS_SIZE; ++i)
    {
        uint count = getter->counters[i];
        result.x = select(result.x, i, (count > getter->counters[result.x]) );
        result.y = select(result.y, i, (count < getter->counters[result.y]) );
        uint condition = equals( &(getter->data[i]), element );
        result.z = select(result.z, (uint)1, condition );
        result.w = select(result.w, i, condition );
    }
    
    //use founded or minimum(if not exists)
    result.w = select(result.y, result.w, result.z );
    getter->counters[result.w] = select(getter->counters[result.w], getter->counters[result.w] + 1, enabled);
    //always rewrite data
    //getter->data[result.w] = *element;
    conditionalCopy( &getter->data[result.w], element, enabled);
}

void mfe_incrementCond_gp(__global mfe_Getter* getter, __private const DATA_TYPE* element, uint enabled)
{
    uint4 result = 0;
    #pragma unroll
    for (uint i=0; i<MFE_COUNTERS_SIZE; ++i)
    {
        uint count = getter->counters[i];
        result.x = select(result.x, i, (count > getter->counters[result.x]) );
        result.y = select(result.y, i, (count < getter->counters[result.y]) );
        uint condition = equals_gp( &(getter->data[i]), element );
        result.z = select(result.z, (uint)1, condition );
        result.w = select(result.w, i, condition );
    }
    
    //use founded or minimum(if not exists)
    result.w = select(result.y, result.w, result.z );
    getter->counters[result.w] = select(getter->counters[result.w], getter->counters[result.w] + 1, enabled);
    //always rewrite data
    //getter->data[result.w] = *element;
    conditionalCopy_gp( &getter->data[result.w], element, enabled);
}
#endif

