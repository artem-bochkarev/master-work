//transition list
#include "GeneticTests/random.clh"

typedef struct tl_sequence
{
    uint values[MAX_OUTPUTS];
}Sequence;

#define DATA_TYPE Sequence

uint equals(__global const DATA_TYPE* a, __global const DATA_TYPE* b)
{
    uint res = 1;
    for (uint i=0; i<MAX_OUTPUTS; ++i)
    {
        res = select( res, (uint)0, a->values[i] != b->values[i] );
    }
    return res;
}

uint equals_ll(__local const DATA_TYPE* a, __local const DATA_TYPE* b)
{
    uint res = 1;
    for (uint i=0; i<MAX_OUTPUTS; ++i)
    {
        res = select( res, (uint)0, a->values[i] != b->values[i] );
    }
    return res;
}

uint equals_lg(__local const DATA_TYPE* a, __global const DATA_TYPE* b)
{
    uint res = 1;
    for (uint i=0; i<MAX_OUTPUTS; ++i)
    {
        res = select( res, (uint)0, a->values[i] != b->values[i] );
    }
    return res;
}

uint equals_gp(__global const DATA_TYPE* a, __private const DATA_TYPE* b)
{
    uint res = 1;
    for (uint i=0; i<MAX_OUTPUTS; ++i)
    {
        res = select( res, (uint)0, a->values[i] != b->values[i] );
    }
    return res;
}

void conditionalCopy( __global DATA_TYPE* a, __global const DATA_TYPE* b, uint c)
{
    for (uint i=0; i<MAX_OUTPUTS; ++i)
    {
        a->values[i] = select( a->values[i], b->values[i], c );
    }
}

void conditionalCopy_gp( __global DATA_TYPE* a, __private const DATA_TYPE* b, uint c)
{
    for (uint i=0; i<MAX_OUTPUTS; ++i)
    {
        a->values[i] = select( a->values[i], b->values[i], c );
    }
}

#define MFE_CONDITIONAL 1
#include "GeneticTests/mfe.clh"

typedef struct tl_test_size
{
    uint inputLength;
    uint outputLength;
    uint offset;
} TestInfo;

typedef struct tl_transition
{
    mfe_Getter mfe;
    uint outputs[MAX_OUTPUTS];
    uint outputsCount;
    uint nextState;
    uint input;
    uint obviousBest;
} Transition;

typedef struct tl_transition_list
{
	Transition list[MAX_TRANSITIONS];
	uint count;
} TransitionList;

typedef struct tl_transition_list_automat
{
	TransitionList states[STATES_NUMBER];
	uint firstState;
} TransitionListAutomat;

void copyTListAutomat(__global TransitionListAutomat* to , __global const TransitionListAutomat* from)
{
    to->firstState = from->firstState;
    for (uint state=0; state<STATES_NUMBER; ++state)
    {
        to->states[state].count = from->states[state].count;
        for (uint transition=0; transition<MAX_TRANSITIONS; ++transition)
        {
            to->states[state].list[transition].outputsCount = from->states[state].list[transition].outputsCount;
            to->states[state].list[transition].nextState = from->states[state].list[transition].nextState;
            to->states[state].list[transition].input = from->states[state].list[transition].input;
            for (uint i=0; i<MAX_OUTPUTS; ++i)
            {
                to->states[state].list[transition].outputs[i] = from->states[state].list[transition].outputs[i];
            }
        }
    }
}

uint mutateOutputSize(uint rand, uint oldSize)
{
    uint type = getValue1024(rand, 3);
    uint result = oldSize;
    
    result = select(result, min(oldSize + 1, (uint)MAX_OUTPUTS), type == 1);
    result = select(result, max(oldSize - 1, (uint)0), type == 2);
    result = select(result, (uint)0, result > MAX_OUTPUTS );
    
    return result;
}

uint mutateTransition(__global Transition* t, uint rand)
{
    uint condition = randomProb256(rand, MUTATION_THRESHOLD); rand = nextUINT(rand);
    uint type = getValue1024(rand, 3); rand = nextUINT(rand);
    t->nextState = select(t->nextState, getValue1024(rand, STATES_NUMBER), condition && (type == 0));
    rand = nextUINT(rand);
    
    t->input = select(t->input, getValue1024(rand, INPUTS_NUMBER), condition && (type == 1));
    rand = nextUINT(rand);
    
    uint newSize = mutateOutputSize(rand, t->outputsCount); rand = nextUINT(rand);
    t->outputsCount = select(t->outputsCount, newSize, condition && (type == 2));
    
    return rand;
}

uint deleteTransition(__global TransitionList* tl, uint rand, uint enableWrite)
{
    uint toDel = rand % tl->count;
    rand = nextUINT(rand);
    tl->count--;
    tl->list[toDel].nextState = tl->list[tl->count].nextState;
    tl->list[toDel].input = tl->list[tl->count].input;
    tl->list[toDel].outputsCount = tl->list[tl->count].outputsCount;
    return rand;
}

uint addTransition(__global TransitionList* tl, uint rand, uint enableWrite)
{
    tl->list[tl->count].nextState = getValue1024(rand, STATES_NUMBER);
    rand = nextUINT(rand);
    
    tl->list[tl->count].input = getValue1024(rand, INPUTS_NUMBER);
    rand = nextUINT(rand);
    
    tl->list[tl->count].outputsCount = getValue1024(rand, MAX_OUTPUTS);
    rand = nextUINT(rand);
    tl->count++;
    
    return rand;
}

void removeDuplicates(__global TransitionList* tl)
{
    uint arr[INPUTS_NUMBER];
    for (uint i=0; i<INPUTS_NUMBER; ++i)
        arr[i] = 0;
    uint writePos = 0;
    for (uint t=0; t<MAX_TRANSITIONS; ++t)
    {
        uint valid = (t < tl->count);

        tl->list[writePos].input = select( tl->list[writePos].input, tl->list[t].input, valid);
        tl->list[writePos].outputsCount = select( tl->list[writePos].outputsCount, tl->list[t].outputsCount, valid);
        tl->list[writePos].nextState = select( tl->list[writePos].nextState, tl->list[t].nextState, valid);
        
        uint condition = (arr[tl->list[t].input] == 0);
        arr[tl->list[t].input] = 1;
        writePos = select(writePos, writePos+1, valid && condition);
    }
    tl->count = writePos;
}

uint mutateMe(__global TransitionListAutomat* input, uint rand)
{
    uint condition = randomProb256(rand, MUTATION_THRESHOLD); rand = nextUINT(rand);
    input->firstState = select( input->firstState, getValue1024(rand, STATES_NUMBER), condition);
	rand = nextUINT(rand);
    
    for (uint state=0; state<STATES_NUMBER; ++state)
    {
        for (uint transition=0; transition<MAX_TRANSITIONS; ++transition)
        {
            rand = mutateTransition(&(input->states[state].list[transition]), rand);
        }
    }
    for (uint state=0; state<STATES_NUMBER; ++state)
    {
        uint enabledAll = randomProb256(rand, MUTATION_THRESHOLD); rand = nextUINT(rand);
        uint who = randomBool(rand); rand = nextUINT(rand);
        uint enabledDelete = (who==0) && enabledAll && (input->states[state].count > 0);
        uint enabledAdd = (who==1) && enabledAll && (input->states[state].count < MAX_TRANSITIONS);
        rand = deleteTransition(&(input->states[state]), rand, enabledDelete );
        rand = addTransition(&(input->states[state]), rand, enabledAdd );
        
        removeDuplicates(&(input->states[state]));
    }
    return rand;
}

uint mutate(__global TransitionListAutomat* result, __global const TransitionListAutomat* input, uint rand)
{
    copyTListAutomat(result, input);
    rand = mutateMe(result, rand);
    return rand;
}

uint crossover1(__global const TransitionListAutomat* mother, __global const TransitionListAutomat* father, 
    __global TransitionListAutomat* child, uint rand)
{
    child->firstState = select(mother->firstState, father->firstState, randomBool(rand));
    rand = nextUINT(rand);
    for (uint state=0; state<STATES_NUMBER; ++state)
    {
        child->states[state].count = select(mother->states[state].count,
            father->states[state].count, randomBool(rand));
        rand = nextUINT(rand);
        for (uint t=0; t<MAX_TRANSITIONS; ++t)
        {
            uint motherT = select(rand%mother->states[state].count, t, t < mother->states[state].count);
            rand = nextUINT(rand);
            uint fatherT = select(rand%father->states[state].count, t, t < father->states[state].count);
            rand = nextUINT(rand);
            
            uint fromWho = randomBool(rand);
            rand = nextUINT(rand);
            
            child->states[state].list[t].nextState = select(mother->states[state].list[motherT].nextState,
                father->states[state].list[fatherT].nextState, fromWho);
					
            child->states[state].list[t].outputsCount = select(mother->states[state].list[motherT].outputsCount,
                father->states[state].list[fatherT].outputsCount, fromWho);
					
            child->states[state].list[t].input = select(mother->states[state].list[motherT].input,
                father->states[state].list[fatherT].input, fromWho);
        }
        removeDuplicates(&(child->states[state]));
    }
    return rand;
}

uint crossover2(__global const TransitionListAutomat* mother, __global const TransitionListAutomat* father, 
    __global TransitionListAutomat* child1, __global TransitionListAutomat* child2, uint rand)
{
return rand;
}

void clearLabels(__global TransitionListAutomat* aut)
{
    for (uint state=0; state<STATES_NUMBER; ++state)
    {
        for (uint t=0; t<MAX_TRANSITIONS; ++t)
        {
            mfe_clear( &(aut->states[state].list[t].mfe) );
        }
    }
}

void labelByMostFrequent(__global Transition* t)
{
    uint2 pos = mfe_check( &(t->mfe) );
    for (uint i=0; i<MAX_OUTPUTS; ++i)
    {
        t->outputs[i] = t->mfe.data[pos.x].values[i];
    }
}

void addOutputSequence( __private const DATA_TYPE* sequence, __global Transition* t, uint on)
{
    mfe_incrementCond_gp( &(t->mfe), sequence, on );
}

void doLabelling( __global TransitionListAutomat* aut, __constant const TestInfo* testInfo, __constant const uint* tests)
{
    for (uint test=0; test<TESTS_NUMBER; ++test)
    {
        const uint lInput = testInfo[test].inputLength;
        const uint lOutput = testInfo[test].outputLength;
        __constant const uint* curInput = tests + testInfo[test].offset;
        __constant const uint* curOutput = tests + testInfo[test].offset + lInput;
        uint currentState = aut->firstState;
        uint pOutput = 0;
        uint enableWrite = 1;
        for (uint i=0; i<MAX_TEST_INPUT; ++i)
        {
            uint found = 0;
            for (uint t=0; t<MAX_TRANSITIONS; ++t)
            {
                uint doIt = enableWrite && (t < aut->states[currentState].count) && (aut->states[currentState].list[t].input == curInput[i]);
                Sequence sequence;
                for (uint k=0; k<MAX_OUTPUTS; ++k)
                {
                    uint nextOutput = select((uint)OUTPUTS_NUMBER, curOutput[pOutput], pOutput < lOutput);
                    uint isNotEnd = k<aut->states[currentState].list[t].outputsCount;
                    sequence.values[k] = select((uint)0, nextOutput, isNotEnd && doIt);
                    pOutput = select(pOutput, pOutput+1, isNotEnd && doIt);
                }
                addOutputSequence( &sequence, &(aut->states[currentState].list[t]), doIt);
                currentState = select( currentState, aut->states[currentState].list[t].nextState, doIt);
                found = select((uint)0, (uint)1, doIt);
            }
            enableWrite = select(enableWrite, (uint)0, (found==0));
        }
    }
    
    for (uint state=0; state<STATES_NUMBER; ++state)
    {
        for (uint t=0; t<MAX_TRANSITIONS; ++t)
        {
            labelByMostFrequent(&(aut->states[state].list[t]));
        }
    }
}

uint transform( __global TransitionListAutomat* aut, __constant const TestInfo* testInfo, __constant const uint* tests, uint test, uint* out)
{
    const uint lInput = testInfo[test].inputLength;
    __constant const uint* curInput = tests + testInfo[test].offset;
    uint currentState = aut->firstState;
    uint pOutput = 0;
    uint broken = 0;
    uint lenBeforeBroken = 0;
    for (uint i=0; i<MAX_TEST_INPUT; ++i)
    {
        uint found = 0;
        uint k = 0;
        uint oldState = currentState;
        for (uint t=0; t<MAX_TRANSITIONS; ++t)
        {
            uint good = (t < aut->states[currentState].count) && (aut->states[currentState].list[t].input == curInput[i]) && (i < lInput);
            found = select(found, (uint)1, good);
            k = select(k, t, good);
            currentState = select(currentState, aut->states[currentState].list[t].nextState, good);
        }
        broken = select(broken, (uint)1, (found==0));
        
        for (uint t = 0; t<MAX_OUTPUTS; ++t)
        {
            uint good = (t < aut->states[oldState].list[k].outputsCount) && (!broken);
            out[pOutput] = aut->states[oldState].list[k].outputs[t];
            pOutput = select(pOutput, pOutput + 1, good);
			pOutput = select(pOutput, (uint)MAX_TEST_OUTPUT-1, pOutput>=MAX_TEST_OUTPUT);
        }
        lenBeforeBroken = select(lenBeforeBroken, pOutput, !broken);
    }
    //pOutput = select(pOutput, (uint)0xFFFFFFFF, broken);
    pOutput = select(pOutput, lenBeforeBroken, broken);
    return pOutput;
}