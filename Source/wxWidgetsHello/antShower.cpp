// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

////@begin includes
////@end includes

#include "antshower.h"

////@begin XPM images
////@end XPM images


/*
 * AntViewer type definition
 */

IMPLEMENT_DYNAMIC_CLASS( AntViewer, wxDialog )


/*
 * AntViewer event table definition
 */

BEGIN_EVENT_TABLE( AntViewer, wxDialog )

////@begin AntViewer event table entries
    EVT_BUTTON( ID_BUTTON, AntViewer::OnButtonClick )

    EVT_CHECKBOX( ID_CHECKBOX, AntViewer::OnCheckboxClick )

////@end AntViewer event table entries

END_EVENT_TABLE()


/*
 * AntViewer constructors
 */

AntViewer::AntViewer()
:antArena(0), bMapDrawed( false ), buttonMode(0)
{
    Init();
}

AntViewer::AntViewer( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
    Init();
    Create(parent, id, caption, pos, size, style);
}


/*
 * AntViewer creator
 */

bool AntViewer::Create( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
////@begin AntViewer creation
    SetExtraStyle(wxWS_EX_BLOCK_EVENTS);
    wxDialog::Create( parent, id, caption, pos, size, style );

    CreateControls();
    if (GetSizer())
    {
        GetSizer()->SetSizeHints(this);
    }
    Centre();
////@end AntViewer creation
    return true;
}


/*
 * AntViewer destructor
 */

AntViewer::~AntViewer()
{
////@begin AntViewer destruction
////@end AntViewer destruction
}


/*
 * Member initialisation
 */

void AntViewer::Init()
{
////@begin AntViewer member initialisation
////@end AntViewer member initialisation
    timer.SetOwner( this, ID_TIMER );
    this->Connect( ID_TIMER, wxEVT_TIMER, wxTimerEventHandler( AntViewer::onTimer ) );
}


/*
 * Control creation for AntViewer
 */

void AntViewer::CreateControls()
{    
////@begin AntViewer content construction
    // Generated by DialogBlocks, 22/11/2011 22:20:29 (unregistered)

    AntViewer* itemDialog1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemDialog1->SetSizer(itemBoxSizer2);

    itemPanel = new wxPanel( itemDialog1, ID_PANEL, wxDefaultPosition, wxSize(455, 455), wxSUNKEN_BORDER|wxTAB_TRAVERSAL );
    itemBoxSizer2->Add(itemPanel, 0, wxGROW|wxALL|wxFIXED_MINSIZE, 5);

    wxBoxSizer* itemBoxSizer4 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer4, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    itemButton = new wxButton( itemDialog1, ID_BUTTON, _("Move"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer4->Add(itemButton, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    itemCheckBox = new wxCheckBox( itemDialog1, ID_CHECKBOX, _("Auto"), wxDefaultPosition, wxDefaultSize, 0 );
    itemCheckBox->SetValue(false);
    itemBoxSizer4->Add(itemCheckBox, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    itemTextMoves = new wxStaticText( itemDialog1, wxID_STATIC, _("0"), wxDefaultPosition, wxSize( 30, 30 ), 0 );
    itemBoxSizer4->Add(itemTextMoves, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    itemTextEaten = new wxStaticText( itemDialog1, wxID_STATIC, _("0"), wxDefaultPosition, wxSize( 30, 30 ), 0 );
    itemBoxSizer4->Add(itemTextEaten, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

////@end AntViewer content construction
}


/*
 * Should we show tooltips?
 */

bool AntViewer::ShowToolTips()
{
    return true;
}

/*
 * Get bitmap resources
 */

wxBitmap AntViewer::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin AntViewer bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end AntViewer bitmap retrieval
}

/*
 * Get icon resources
 */

wxIcon AntViewer::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin AntViewer icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end AntViewer icon retrieval
}


/*
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BUTTON
 */
void AntViewer::draw()
{
    drawMap();
    drawVisibleCells( wxColor( 170, 170, 230 ) );
    drawAnt( wxColor( 250, 70, 70 ) );
    drawFood( wxColor( 100, 250, 100) );
    itemTextMoves->SetLabel( wxString::Format( wxT("%i"), antArena->movesMaked() ) );
    itemTextEaten->SetLabel( wxString::Format( wxT("%i"), antArena->foodEaten() ) );
}

void AntViewer::OnButtonClick( wxCommandEvent& event )
{
    if ( itemCheckBox->IsChecked() == false )
    {
        
        //drawAnt( itemPanel->GetBackgroundColour() );
        antArena->makeMove();
        draw();
    }else
    {
        if ( buttonMode == 0 )
        {
            timer.Start( 250 );
            buttonMode = 1;
            itemButton->SetLabel( _("Stop") );

        }else
        {
            timer.Stop();
            buttonMode = 0;
            itemButton->SetLabel( _("Start") );
        }
    }
}

void AntViewer::onTimer(wxTimerEvent &event)
{
    if ( antArena->makeMove() )
    {
        draw();
    }else
    {
        timer.Stop();
        buttonMode = 0;
    }
}


/*
 * wxEVT_COMMAND_CHECKBOX_CLICKED event handler for ID_CHECKBOX
 */

void AntViewer::OnCheckboxClick( wxCommandEvent& event )
{
    if ( itemCheckBox->IsChecked() == true )
    {
        buttonMode = 0;
        itemButton->SetLabel( _("Start") );
    }else
    {
        buttonMode = 1;
        itemButton->SetLabel( _("Move") );
        timer.Stop();
    }
}

void AntViewer::drawMap()
{
    itemPanel->ClearBackground();
    bMapDrawed = true;
    wxClientDC dc( itemPanel );
    
    wxSize size = itemPanel->GetClientSize();
    size_t width = antArena->getArena()->width();
    size_t height = antArena->getArena()->height();
    size_t dx = size.GetWidth() / width;
    size_t dy = size.GetHeight() / height;
    wxPen pen( this->GetBackgroundColour() , 1); // red pen of width 1
    wxBrush brush( this->GetBackgroundColour() );
    dc.SetPen(pen);
    dc.SetBrush( brush );
    dc.DrawRectangle(0, 0, dx*width, dy*height );

    pen.SetColour( wxColor(150, 150, 150) );
    dc.SetPen(pen);
    int x = 0, y = 0;
    for ( size_t i=0; i<=width; ++i)
    {
        dc.DrawLine( dx*i, 0, dx*i, dy*height );
    }
    for ( size_t i=0; i<=height; ++i)
    {
        dc.DrawLine( 0, dy*i, dx*width, dy*i );
    }
    dc.SetPen(wxNullPen);
}

void AntViewer::drawFood( wxColor color )
{
    wxClientDC dc( itemPanel );
    wxPen pen( color, 1 );
    wxBrush brush( color );
    dc.SetBrush( brush );
    dc.SetPen( pen );
    wxSize size = itemPanel->GetClientSize();
    size_t width = antArena->getArena()->width();
    size_t height = antArena->getArena()->height();
    size_t dx = size.GetWidth() / width;
    size_t dy = size.GetHeight() / height;
    for ( size_t i=0; i<width; ++i )
        for ( size_t j=0; j<height; ++j )
        {
            if ( antArena->getArena()->get( i, j ) > 0 )
            {
                dc.DrawCircle( dx*i + dx/2, dy*j + dy/2, (dx+dy)/4 );
            }
        }
    dc.SetPen(wxNullPen);
}

void AntViewer::drawAnt( wxColor color )
{
   // if ( !bMapDrawed )
        
    wxClientDC dc(itemPanel);
    wxSize size = itemPanel->GetClientSize();
    size_t width = antArena->getArena()->width();
    size_t height = antArena->getArena()->height();
    size_t dx = size.GetWidth() / width;
    size_t dy = size.GetHeight() / height;
    wxPen pen( color, 2); 
    dc.SetPen(pen);

    int antX = antArena->getX();
    int antY = antArena->getY();
    EDirection dir = antArena->getDir();
    int x = dx * antX + dx/2;
    int y = dy * antY + dy/2;
    int k = dx/4;
    switch ( dir )
    {
    case(DLeft):
        dc.DrawLine( x-k, y, x+k, y+k );
        dc.DrawLine( x-k, y, x+k, y-k );
        break;
    case(DTop):
        dc.DrawLine( x, y-k, x+k, y+k );
        dc.DrawLine( x, y-k, x-k, y+k );
        break;
    case(DRight):
        dc.DrawLine( x+k, y, x-k, y+k );
        dc.DrawLine( x+k, y, x-k, y-k );    
        break;
    case(DBottom):
        dc.DrawLine( x, y+k, x+k, y-k );
        dc.DrawLine( x, y+k, x-k, y-k );   
        break;
    }
    dc.SetPen(wxNullPen);
}

void AntViewer::drawVisibleCells( wxColor color )
{
    wxClientDC dc( itemPanel );
    
    wxSize size = itemPanel->GetClientSize();
    size_t width = antArena->getArena()->width();
    size_t height = antArena->getArena()->height();
    size_t dx = size.GetWidth() / width;
    size_t dy = size.GetHeight() / height;
    wxPen pen( color , 1); // red pen of width 1
    wxBrush brush( color );
    dc.SetPen(pen);
    dc.SetBrush( brush );

    std::vector< std::pair<int, int> > vec( antArena->getVisibleCells( antArena->getArena(), 
        antArena->getX(), antArena->getY(), antArena->getDir() ) );
    for ( size_t i=0; i<vec.size(); ++i)
    {
        const std::pair<int, int>& pair( vec[i] );
        int x = pair.first;
        int y = pair.second;
        dc.DrawRectangle( dx*x, dy*y, dx, dy );
    }
    
}

void AntViewer::setTester(wxSharedPtr<CTest> ptr)
{
    antArena = ptr;
    drawMap();
}